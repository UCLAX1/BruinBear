from roboticstoolbox import mstraj
import numpy as np
import matplotlib.pyplot as plt

# Define the via points (trajectory waypoints)
viapoints = np.array([[-90, 0], [-100, 5], [-90, 10], [-50, 35], [0, 50], [50, 35], [90, 10], [100, 5], [90, 0], [50, 0], [0, 0], [-50, 0], [-90, 0], [-100, 5]])
#To be determined
time_segements = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

# Generate the trajectory (using quintic polynomial interpolation)
# have lesser acceleration are start and endpoints
tg1 = mstraj(viapoints, dt = 1, tacc = 1, tsegment = time_segements)

# Extract the positions (q) from the trajectory
positions = tg1.q  # This contains x, y positions as columns

# Extract x and y positions from the trajectory data
x_positions = positions[:, 0]  # First column contains x coordinates
y_positions = positions[:, 1]  # Second column contains y coordinates

# Plot x vs y (2D trajectory plot)
plt.figure(figsize=(8, 6))
plt.plot(x_positions, y_positions, marker='o', linestyle='-', color='b')
plt.title("Trajectory in X-Y Plane")
plt.xlabel("X Position")
plt.ylabel("Y Position")
plt.grid(True)
plt.gca().set_aspect('equal', adjustable='box')  # Ensure equal scaling for both axes
plt.show()




# from roboticstoolbox import Piecewise
# import numpy as np
# import matplotlib.pyplot as plt

# # Define waypoints (e.g., joint angles or Cartesian positions)
# waypoints = np.array([0, 0.5, 1, 0.5, 0])  # Example waypoints
# times = np.array([0, 1, 3, 4, 5])          # Corresponding times for the waypoints

# # Generate the piecewise trajectory
# trajectory = Piecewise(times, waypoints)

# # Plot the piecewise trajectory
# trajectory.plot()
# plt.show()

# # Access the trajectory position values at each time step
# print(trajectory.q)

# # changes