from roboticstoolbox import mstraj
import numpy as np
import matplotlib.pyplot as plt

width = 0.02 
height = 0.28
dt = 0.001
totalTrajTime = 10
forwardStrokeTime = totalTrajTime/4
backStrokeTime = (3*totalTrajTime)/4
homeY = 0.3

viapoints = np.array([[0, homeY], [width/2, homeY+height], [0, homeY+height], [-width/2, homeY+height], [0, homeY]])

time_segments = [forwardStrokeTime/2, backStrokeTime/2,  backStrokeTime/2, forwardStrokeTime/2]
traj = mstraj(viapoints, dt, tacc = dt/4, tsegment = time_segments)
positions = traj.q # number of positions is ~ totalTime/dt ish
timeSteps = len(positions) - 1


# Extract x and y positions from the trajectory data
x_positions = positions[:, 0]  # First column contains x coordinates
y_positions = positions[:, 1]  # Second column contains y coordinates

# Plot x vs y (2D trajectory plot)
plt.figure(figsize=(6, 8))
plt.plot(x_positions, y_positions, marker='o', linestyle='-', color='b')
plt.title("Trajectory in X-Y Plane")
plt.xlabel("X Position")
plt.ylabel("Y Position")
plt.grid(True)
plt.gca().set_aspect('equal', adjustable='box')  # Ensure equal scaling for both axes
plt.show()




# from roboticstoolbox import Piecewise
# import numpy as np
# import matplotlib.pyplot as plt

# # Define waypoints (e.g., joint angles or Cartesian positions)
# waypoints = np.array([0, 0.5, 1, 0.5, 0])  # Example waypoints
# times = np.array([0, 1, 3, 4, 5])          # Corresponding times for the waypoints

# # Generate the piecewise trajectory
# trajectory = Piecewise(times, waypoints)

# # Plot the piecewise trajectory
# trajectory.plot()
# plt.show()

# # Access the trajectory position values at each time step
# print(trajectory.q)

# # changes